//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exemplo.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System;
using System.IO;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class ExemploParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ASSIGNMENT=1, PLUS_ASSIGNMENT=2, MINUS_ASSIGNMENT=3, DIV_ASSIGNMENT=4, 
		TIMES_ASSIGNMENT=5, GT=6, GE=7, LT=8, LE=9, EQ=10, NEQ=11, PLUS=12, MINUS=13, 
		DIV=14, TIMES=15, POW=16, LBRACE=17, RBRACE=18, LPAREN=19, RPAREN=20, 
		SEMI=21, COMMA=22, WHITESPACE=23, SINGLE_LINE_COMMENT=24, DELIMITED_COMMENT=25, 
		AND=26, OR=27, IF=28, ELSE=29, WHILE=30, EXTERNAL=31, COALESCE_OPERATOR=32, 
		NULL=33, VAR=34, NUMBER=35, VARIABLE=36, TEXT=37;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_expression = 2, RULE_high_precedence_operator = 3, 
		RULE_low_precedence_operator = 4, RULE_arithmetic_expression = 5, RULE_comparison_expression = 6, 
		RULE_loop_expression = 7, RULE_null_coalescing_expression = 8, RULE_variable_declaration = 9, 
		RULE_assignment = 10, RULE_statement = 11, RULE_if_body = 12, RULE_else_body = 13, 
		RULE_atom = 14, RULE_variable = 15, RULE_external = 16, RULE_comparison_operator = 17, 
		RULE_assignment_operator = 18;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "expression", "high_precedence_operator", "low_precedence_operator", 
		"arithmetic_expression", "comparison_expression", "loop_expression", "null_coalescing_expression", 
		"variable_declaration", "assignment", "statement", "if_body", "else_body", 
		"atom", "variable", "external", "comparison_operator", "assignment_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'+='", "'-='", "'/='", "'*='", "'>'", "'>='", "'<'", "'<='", 
		"'=='", "'!='", "'+'", "'-'", "'/'", "'*'", "'^'", "'{'", "'}'", "'('", 
		"')'", "';'", "','", null, null, null, "'&&'", "'||'", "'if'", "'else'", 
		"'while'", "'@'", "'??'", "'null'", "'var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ASSIGNMENT", "PLUS_ASSIGNMENT", "MINUS_ASSIGNMENT", "DIV_ASSIGNMENT", 
		"TIMES_ASSIGNMENT", "GT", "GE", "LT", "LE", "EQ", "NEQ", "PLUS", "MINUS", 
		"DIV", "TIMES", "POW", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "SEMI", 
		"COMMA", "WHITESPACE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "AND", 
		"OR", "IF", "ELSE", "WHILE", "EXTERNAL", "COALESCE_OPERATOR", "NULL", 
		"VAR", "NUMBER", "VARIABLE", "TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exemplo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExemploParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExemploParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExemploParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << EXTERNAL) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 38; rule_block();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; variable_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46; expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 47; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public Loop_expressionContext loop_expression() {
			return GetRuleContext<Loop_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; arithmetic_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; comparison_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; loop_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class High_precedence_operatorContext : ParserRuleContext {
		public ITerminalNode TIMES() { return GetToken(ExemploParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(ExemploParser.DIV, 0); }
		public High_precedence_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_high_precedence_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHigh_precedence_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public High_precedence_operatorContext high_precedence_operator() {
		High_precedence_operatorContext _localctx = new High_precedence_operatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_high_precedence_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==DIV || _la==TIMES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Low_precedence_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(ExemploParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(ExemploParser.MINUS, 0); }
		public Low_precedence_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_low_precedence_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLow_precedence_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Low_precedence_operatorContext low_precedence_operator() {
		Low_precedence_operatorContext _localctx = new Low_precedence_operatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_low_precedence_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceArithmeticExpressionContext : Arithmetic_expressionContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public CoalesceArithmeticExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HighPrecedenceExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public High_precedence_operatorContext high_precedence_operator() {
			return GetRuleContext<High_precedence_operatorContext>(0);
		}
		public HighPrecedenceExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHighPrecedenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExpressionContext : Arithmetic_expressionContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode POW() { return GetToken(ExemploParser.POW, 0); }
		public PowExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LowPrecedenceExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Low_precedence_operatorContext low_precedence_operator() {
			return GetRuleContext<Low_precedence_operatorContext>(0);
		}
		public LowPrecedenceExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLowPrecedenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 60; Match(LPAREN);
				State = 61; arithmetic_expression(0);
				State = 62; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new CoalesceArithmeticExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 64; null_coalescing_expression();
				}
				break;
			case 3:
				{
				_localctx = new AtomExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 81;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 79;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new PowExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 68;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 69; Match(POW);
						State = 70; arithmetic_expression(7);
						}
						break;
					case 2:
						{
						_localctx = new HighPrecedenceExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 71;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 72; high_precedence_operator();
						State = 73; arithmetic_expression(6);
						}
						break;
					case 3:
						{
						_localctx = new LowPrecedenceExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 75;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 76; low_precedence_operator();
						State = 77; arithmetic_expression(5);
						}
						break;
					}
					} 
				}
				State = 83;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndComparisonExpressionContext : Comparison_expressionContext {
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(ExemploParser.AND, 0); }
		public AndComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrComparisonExpressionContext : Comparison_expressionContext {
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(ExemploParser.OR, 0); }
		public OrComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		return comparison_expression(0);
	}

	private Comparison_expressionContext comparison_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, _parentState);
		Comparison_expressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_comparison_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new ComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 85; arithmetic_expression(0);
				State = 86; comparison_operator();
				State = 87; arithmetic_expression(0);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89; Match(LPAREN);
				State = 90; comparison_expression(0);
				State = 91; Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 101;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new AndComparisonExpressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 95;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 96; Match(AND);
						State = 97; comparison_expression(4);
						}
						break;
					case 2:
						{
						_localctx = new OrComparisonExpressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 98;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 99; Match(OR);
						State = 100; comparison_expression(3);
						}
						break;
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Loop_expressionContext : ParserRuleContext {
		public Loop_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_expression; } }
	 
		public Loop_expressionContext() { }
		public virtual void CopyFrom(Loop_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileExpressionContext : Loop_expressionContext {
		public ITerminalNode WHILE() { return GetToken(ExemploParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(ExemploParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ExemploParser.RBRACE, 0); }
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public WhileExpressionContext(Loop_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_expressionContext loop_expression() {
		Loop_expressionContext _localctx = new Loop_expressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_loop_expression);
		int _la;
		try {
			_localctx = new WhileExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(WHILE);
			State = 107; Match(LPAREN);
			State = 108; comparison_expression(0);
			State = 109; Match(RPAREN);
			State = 110; Match(LBRACE);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << EXTERNAL) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 111; rule_block();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
	 
		public Null_coalescing_expressionContext() { }
		public virtual void CopyFrom(Null_coalescing_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceExpressionContext : Null_coalescing_expressionContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode COALESCE_OPERATOR() { return GetToken(ExemploParser.COALESCE_OPERATOR, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public CoalesceExpressionContext(Null_coalescing_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_null_coalescing_expression);
		try {
			_localctx = new CoalesceExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; atom();
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 120; Match(COALESCE_OPERATOR);
				State = 121; null_coalescing_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	 
		public Variable_declarationContext() { }
		public virtual void CopyFrom(Variable_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : Variable_declarationContext {
		public ITerminalNode VAR() { return GetToken(ExemploParser.VAR, 0); }
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(ExemploParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExemploParser.SEMI, 0); }
		public VariableDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable_declaration);
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(VAR);
			State = 125; Match(VARIABLE);
			State = 126; Match(ASSIGNMENT);
			State = 127; expression();
			State = 128; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : AssignmentContext {
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExemploParser.SEMI, 0); }
		public VariableAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(VARIABLE);
			State = 131; assignment_operator();
			State = 132; expression();
			State = 133; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ITerminalNode[] IF() { return GetTokens(ExemploParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(ExemploParser.IF, i);
		}
		public ITerminalNode[] LPAREN() { return GetTokens(ExemploParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(ExemploParser.LPAREN, i);
		}
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(ExemploParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(ExemploParser.RPAREN, i);
		}
		public ITerminalNode[] LBRACE() { return GetTokens(ExemploParser.LBRACE); }
		public ITerminalNode LBRACE(int i) {
			return GetToken(ExemploParser.LBRACE, i);
		}
		public If_bodyContext if_body() {
			return GetRuleContext<If_bodyContext>(0);
		}
		public ITerminalNode[] RBRACE() { return GetTokens(ExemploParser.RBRACE); }
		public ITerminalNode RBRACE(int i) {
			return GetToken(ExemploParser.RBRACE, i);
		}
		public ITerminalNode[] ELSE() { return GetTokens(ExemploParser.ELSE); }
		public ITerminalNode ELSE(int i) {
			return GetToken(ExemploParser.ELSE, i);
		}
		public Else_bodyContext[] else_body() {
			return GetRuleContexts<Else_bodyContext>();
		}
		public Else_bodyContext else_body(int i) {
			return GetRuleContext<Else_bodyContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		int _la;
		try {
			int _alt;
			_localctx = new IfStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(IF);
			State = 136; Match(LPAREN);
			State = 137; comparison_expression(0);
			State = 138; Match(RPAREN);
			State = 139; Match(LBRACE);
			State = 140; if_body();
			State = 141; Match(RBRACE);
			State = 153;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 142; Match(ELSE);
					State = 143; Match(IF);
					State = 144; Match(LPAREN);
					State = 145; comparison_expression(0);
					State = 146; Match(RPAREN);
					State = 147; Match(LBRACE);
					State = 148; else_body();
					State = 149; Match(RBRACE);
					}
					} 
				}
				State = 155;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 156; Match(ELSE);
				State = 157; Match(LBRACE);
				State = 158; else_body();
				State = 159; Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
	 
		public If_bodyContext() { }
		public virtual void CopyFrom(If_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBodyContext : If_bodyContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public IfBodyContext(If_bodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_if_body);
		int _la;
		try {
			_localctx = new IfBodyContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << EXTERNAL) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 163; rule_block();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_bodyContext : ParserRuleContext {
		public Else_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_body; } }
	 
		public Else_bodyContext() { }
		public virtual void CopyFrom(Else_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseBodyContext : Else_bodyContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ElseBodyContext(Else_bodyContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_bodyContext else_body() {
		Else_bodyContext _localctx = new Else_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_else_body);
		int _la;
		try {
			_localctx = new ElseBodyContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << EXTERNAL) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 169; rule_block();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAtomContext : AtomContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExternalAtomContext : AtomContext {
		public ExternalContext external() {
			return GetRuleContext<ExternalContext>(0);
		}
		public ExternalAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextAtomContext : AtomContext {
		public ITerminalNode TEXT() { return GetToken(ExemploParser.TEXT, 0); }
		public TextAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode NUMBER() { return GetToken(ExemploParser.NUMBER, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullAtomContext : AtomContext {
		public ITerminalNode NULL() { return GetToken(ExemploParser.NULL, 0); }
		public NullAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_atom);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; Match(NUMBER);
				}
				break;
			case TEXT:
				_localctx = new TextAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 176; Match(TEXT);
				}
				break;
			case NULL:
				_localctx = new NullAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 177; Match(NULL);
				}
				break;
			case VARIABLE:
				_localctx = new VariableAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 178; variable();
				}
				break;
			case EXTERNAL:
				_localctx = new ExternalAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 179; external();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(ExemploParser.EXTERNAL, 0); }
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public ExternalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalContext external() {
		ExternalContext _localctx = new ExternalContext(Context, State);
		EnterRule(_localctx, 32, RULE_external);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(EXTERNAL);
			State = 185; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(ExemploParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(ExemploParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(ExemploParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(ExemploParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(ExemploParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(ExemploParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ) | (1L << NEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(ExemploParser.ASSIGNMENT, 0); }
		public ITerminalNode PLUS_ASSIGNMENT() { return GetToken(ExemploParser.PLUS_ASSIGNMENT, 0); }
		public ITerminalNode MINUS_ASSIGNMENT() { return GetToken(ExemploParser.MINUS_ASSIGNMENT, 0); }
		public ITerminalNode DIV_ASSIGNMENT() { return GetToken(ExemploParser.DIV_ASSIGNMENT, 0); }
		public ITerminalNode TIMES_ASSIGNMENT() { return GetToken(ExemploParser.TIMES_ASSIGNMENT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGNMENT) | (1L << PLUS_ASSIGNMENT) | (1L << MINUS_ASSIGNMENT) | (1L << DIV_ASSIGNMENT) | (1L << TIMES_ASSIGNMENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 6: return comparison_expression_sempred((Comparison_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}
	private bool comparison_expression_sempred(Comparison_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xC2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\a', '\x2', '*', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '-', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x38', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x45', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'R', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'U', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '`', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'h', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'k', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 's', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 'v', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '}', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x9A', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x9D', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xA4', 
		'\n', '\r', '\x3', '\xE', '\a', '\xE', '\xA7', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xAA', '\v', '\xE', '\x3', '\xF', '\a', '\xF', '\xAD', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB0', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xB7', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x2', '\x4', '\f', '\xE', '\x15', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\x6', '\x3', '\x2', 
		'\x10', '\x11', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', '\b', '\r', 
		'\x3', '\x2', '\x3', '\a', '\x2', '\xC6', '\x2', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x32', '\x3', '\x2', '\x2', '\x2', '\x6', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x39', '\x3', '\x2', '\x2', '\x2', '\n', ';', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '_', '\x3', '\x2', '\x2', '\x2', '\x10', 'l', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'y', '\x3', '\x2', '\x2', '\x2', '\x14', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x84', '\x3', '\x2', '\x2', '\x2', '\x18', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xB8', '\x3', '\x2', '\x2', '\x2', '\"', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xBD', '\x3', '\x2', '\x2', '\x2', '&', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\x4', '\x3', '\x2', ')', 
		'(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '\x3', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x33', '\x5', '\x16', '\f', '\x2', '/', '\x33', '\x5', '\x14', 
		'\v', '\x2', '\x30', '\x33', '\x5', '\x6', '\x4', '\x2', '\x31', '\x33', 
		'\x5', '\x18', '\r', '\x2', '\x32', '.', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x38', '\x5', '\f', '\a', '\x2', '\x35', 
		'\x38', '\x5', '\xE', '\b', '\x2', '\x36', '\x38', '\x5', '\x10', '\t', 
		'\x2', '\x37', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\t', '\x2', '\x2', '\x2', 
		':', '\t', '\x3', '\x2', '\x2', '\x2', ';', '<', '\t', '\x3', '\x2', '\x2', 
		'<', '\v', '\x3', '\x2', '\x2', '\x2', '=', '>', '\b', '\a', '\x1', '\x2', 
		'>', '?', '\a', '\x15', '\x2', '\x2', '?', '@', '\x5', '\f', '\a', '\x2', 
		'@', '\x41', '\a', '\x16', '\x2', '\x2', '\x41', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x45', '\x5', '\x12', '\n', '\x2', '\x43', '\x45', 
		'\x5', '\x1E', '\x10', '\x2', '\x44', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'S', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\f', 
		'\b', '\x2', '\x2', 'G', 'H', '\a', '\x12', '\x2', '\x2', 'H', 'R', '\x5', 
		'\f', '\a', '\t', 'I', 'J', '\f', '\a', '\x2', '\x2', 'J', 'K', '\x5', 
		'\b', '\x5', '\x2', 'K', 'L', '\x5', '\f', '\a', '\b', 'L', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\f', '\x6', '\x2', '\x2', 'N', 'O', '\x5', 
		'\n', '\x6', '\x2', 'O', 'P', '\x5', '\f', '\a', '\a', 'P', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'Q', '\x46', '\x3', '\x2', '\x2', '\x2', 'Q', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 'R', 
		'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\b', '\b', '\x1', 
		'\x2', 'W', 'X', '\x5', '\f', '\a', '\x2', 'X', 'Y', '\x5', '$', '\x13', 
		'\x2', 'Y', 'Z', '\x5', '\f', '\a', '\x2', 'Z', '`', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', '\x15', '\x2', '\x2', '\\', ']', '\x5', '\xE', 
		'\b', '\x2', ']', '^', '\a', '\x16', '\x2', '\x2', '^', '`', '\x3', '\x2', 
		'\x2', '\x2', '_', 'V', '\x3', '\x2', '\x2', '\x2', '_', '[', '\x3', '\x2', 
		'\x2', '\x2', '`', 'i', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\f', 
		'\x5', '\x2', '\x2', '\x62', '\x63', '\a', '\x1C', '\x2', '\x2', '\x63', 
		'h', '\x5', '\xE', '\b', '\x6', '\x64', '\x65', '\f', '\x4', '\x2', '\x2', 
		'\x65', '\x66', '\a', '\x1D', '\x2', '\x2', '\x66', 'h', '\x5', '\xE', 
		'\b', '\x5', 'g', '\x61', '\x3', '\x2', '\x2', '\x2', 'g', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 
		'm', '\a', ' ', '\x2', '\x2', 'm', 'n', '\a', '\x15', '\x2', '\x2', 'n', 
		'o', '\x5', '\xE', '\b', '\x2', 'o', 'p', '\a', '\x16', '\x2', '\x2', 
		'p', 't', '\a', '\x13', '\x2', '\x2', 'q', 's', '\x5', '\x4', '\x3', '\x2', 
		'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 
		'u', 'w', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\a', '\x14', '\x2', '\x2', 'x', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x5', '\x1E', '\x10', '\x2', 'z', '{', '\a', '\"', '\x2', 
		'\x2', '{', '}', '\x5', '\x12', '\n', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '$', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'&', '\x2', '\x2', '\x80', '\x81', '\a', '\x3', '\x2', '\x2', '\x81', 
		'\x82', '\x5', '\x6', '\x4', '\x2', '\x82', '\x83', '\a', '\x17', '\x2', 
		'\x2', '\x83', '\x15', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', 
		'&', '\x2', '\x2', '\x85', '\x86', '\x5', '&', '\x14', '\x2', '\x86', 
		'\x87', '\x5', '\x6', '\x4', '\x2', '\x87', '\x88', '\a', '\x17', '\x2', 
		'\x2', '\x88', '\x17', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'\x1E', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x15', '\x2', '\x2', '\x8B', 
		'\x8C', '\x5', '\xE', '\b', '\x2', '\x8C', '\x8D', '\a', '\x16', '\x2', 
		'\x2', '\x8D', '\x8E', '\a', '\x13', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'\x1A', '\xE', '\x2', '\x8F', '\x9B', '\a', '\x14', '\x2', '\x2', '\x90', 
		'\x91', '\a', '\x1F', '\x2', '\x2', '\x91', '\x92', '\a', '\x1E', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x15', '\x2', '\x2', '\x93', '\x94', '\x5', 
		'\xE', '\b', '\x2', '\x94', '\x95', '\a', '\x16', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x13', '\x2', '\x2', '\x96', '\x97', '\x5', '\x1C', '\xF', 
		'\x2', '\x97', '\x98', '\a', '\x14', '\x2', '\x2', '\x98', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x90', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\x1F', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x13', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x1C', '\xF', '\x2', '\xA1', '\xA2', '\a', 
		'\x14', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\x5', 
		'\x4', '\x3', '\x2', '\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAD', '\x5', '\x4', '\x3', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB7', '\a', '%', '\x2', '\x2', '\xB2', '\xB7', '\a', 
		'\'', '\x2', '\x2', '\xB3', '\xB7', '\a', '#', '\x2', '\x2', '\xB4', '\xB7', 
		'\x5', ' ', '\x11', '\x2', '\xB5', '\xB7', '\x5', '\"', '\x12', '\x2', 
		'\xB6', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '&', 
		'\x2', '\x2', '\xB9', '!', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '!', '\x2', '\x2', '\xBB', '\xBC', '\a', '&', '\x2', '\x2', '\xBC', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\t', '\x4', '\x2', '\x2', 
		'\xBE', '%', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\t', '\x5', 
		'\x2', '\x2', '\xC0', '\'', '\x3', '\x2', '\x2', '\x2', '\x12', '+', '\x32', 
		'\x37', '\x44', 'Q', 'S', '_', 'g', 'i', 't', '|', '\x9B', '\xA3', '\xA8', 
		'\xAE', '\xB6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
