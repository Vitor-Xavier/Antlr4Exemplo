//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exemplo.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExemploLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, NUMBER=2, VARIABLE=3, ASSIGNMENT=4, GT=5, GE=6, LT=7, LE=8, EQ=9, 
		NEQ=10, PLUS=11, MINUS=12, DIV=13, TIMES=14, LPAREN=15, RPAREN=16, SEMI=17, 
		WHITESPACE=18, SINGLE_LINE_COMMENT=19, DELIMITED_COMMENT=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"VAR", "NUMBER", "VARIABLE", "ASSIGNMENT", "GT", "GE", "LT", "LE", "EQ", 
		"NEQ", "PLUS", "MINUS", "DIV", "TIMES", "LPAREN", "RPAREN", "SEMI", "WHITESPACE", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT"
	};


	public ExemploLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExemploLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", null, null, "'='", "'>'", "'>='", "'<'", "'<='", "'=='", 
		"'!='", "'+'", "'-'", "'/'", "'*'", "'('", "')'", "';'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "NUMBER", "VARIABLE", "ASSIGNMENT", "GT", "GE", "LT", "LE", 
		"EQ", "NEQ", "PLUS", "MINUS", "DIV", "TIMES", "LPAREN", "RPAREN", "SEMI", 
		"WHITESPACE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exemplo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExemploLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x16', '\x83', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x5', 
		'\x3', '\x31', '\n', '\x3', '\x3', '\x3', '\x6', '\x3', '\x34', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\x35', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', ':', '\n', '\x3', '\r', '\x3', '\xE', '\x3', ';', '\x5', 
		'\x3', '>', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x42', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', 'o', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', 'r', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 'z', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '}', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x4', 'p', 
		'{', '\x2', '\x16', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', 
		'\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', 
		'\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', 
		'\x11', '!', '\x12', '#', '\x13', '%', '\x14', '\'', '\x15', ')', '\x16', 
		'\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\x43', 
		'\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', '\x43', 
		'\\', '\x61', '\x61', '\x63', '|', '\x2', '\x89', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '+', '\x3', '\x2', '\x2', '\x2', '\x5', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\a', '?', '\x3', '\x2', '\x2', '\x2', '\t', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\v', 'H', '\x3', '\x2', '\x2', '\x2', '\r', 
		'J', '\x3', '\x2', '\x2', '\x2', '\xF', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'O', '\x3', '\x2', '\x2', '\x2', '\x13', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'U', '\x3', '\x2', '\x2', '\x2', '\x17', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1B', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '^', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'`', '\x3', '\x2', '\x2', '\x2', '!', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x64', '\x3', '\x2', '\x2', '\x2', '%', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\'', 'j', '\x3', '\x2', '\x2', '\x2', ')', 'u', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', 'x', '\x2', '\x2', ',', '-', '\a', '\x63', 
		'\x2', '\x2', '-', '.', '\a', 't', '\x2', '\x2', '.', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x31', '\a', '/', '\x2', '\x2', '\x30', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\t', '\x2', '\x2', 
		'\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\a', '\x30', '\x2', '\x2', '\x38', ':', '\t', 
		'\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', 
		'=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x6', '\x3', '\x2', '\x2', '\x2', '?', '\x43', '\t', '\x3', 
		'\x2', '\x2', '@', '\x42', '\t', '\x4', '\x2', '\x2', '\x41', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\b', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\a', '?', '\x2', '\x2', 'G', '\n', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '@', '\x2', '\x2', 'I', '\f', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '@', '\x2', '\x2', 'K', 'L', 
		'\a', '?', '\x2', '\x2', 'L', '\xE', '\x3', '\x2', '\x2', '\x2', 'M', 
		'N', '\a', '>', '\x2', '\x2', 'N', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\a', '>', '\x2', '\x2', 'P', 'Q', '\a', '?', '\x2', '\x2', 
		'Q', '\x12', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '?', '\x2', '\x2', 
		'S', 'T', '\a', '?', '\x2', '\x2', 'T', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\a', '#', '\x2', '\x2', 'V', 'W', '\a', '?', '\x2', '\x2', 
		'W', '\x16', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '-', '\x2', '\x2', 
		'Y', '\x18', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '/', '\x2', '\x2', 
		'[', '\x1A', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\x31', '\x2', 
		'\x2', ']', '\x1C', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', ',', '\x2', 
		'\x2', '_', '\x1E', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', '*', 
		'\x2', '\x2', '\x61', ' ', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\a', '+', '\x2', '\x2', '\x63', '\"', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\a', '=', '\x2', '\x2', '\x65', '$', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\a', '\"', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\b', '\x13', '\x2', '\x2', 'i', '&', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\a', '\x31', '\x2', '\x2', 'k', 'l', '\a', '\x31', '\x2', 
		'\x2', 'l', 'p', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\v', '\x2', '\x2', 
		'\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\b', '\x14', '\x2', '\x2', 't', '(', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '\x31', '\x2', '\x2', 'v', 'w', '\a', ',', '\x2', 
		'\x2', 'w', '{', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\v', '\x2', '\x2', 
		'\x2', 'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '|', '~', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', ',', '\x2', '\x2', '\x7F', '\x80', '\a', '\x31', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\b', '\x15', '\x2', '\x2', '\x82', '*', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x2', '\x30', '\x35', ';', '=', '\x43', 'p', '{', '\x3', '\b', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
