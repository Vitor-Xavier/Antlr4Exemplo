//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exemplo.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExemploParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public interface IExemploListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExemploParser.rule_set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_set([NotNull] ExemploParser.Rule_setContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExemploParser.rule_set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_set([NotNull] ExemploParser.Rule_setContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExemploParser.rule_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_block([NotNull] ExemploParser.Rule_blockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExemploParser.rule_block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_block([NotNull] ExemploParser.Rule_blockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExemploParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ExemploParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExemploParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ExemploParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>minusExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusExpression([NotNull] ExemploParser.MinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minusExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusExpression([NotNull] ExemploParser.MinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>timesExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTimesExpression([NotNull] ExemploParser.TimesExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>timesExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTimesExpression([NotNull] ExemploParser.TimesExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atomExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomExpression([NotNull] ExemploParser.AtomExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atomExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomExpression([NotNull] ExemploParser.AtomExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpression([NotNull] ExemploParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpression([NotNull] ExemploParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>divExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivExpression([NotNull] ExemploParser.DivExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivExpression([NotNull] ExemploParser.DivExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>plusExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlusExpression([NotNull] ExemploParser.PlusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>plusExpression</c>
	/// labeled alternative in <see cref="ExemploParser.arithmetic_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlusExpression([NotNull] ExemploParser.PlusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="ExemploParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] ExemploParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>comparisonExpression</c>
	/// labeled alternative in <see cref="ExemploParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] ExemploParser.ComparisonExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisComparisonExpression</c>
	/// labeled alternative in <see cref="ExemploParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisComparisonExpression([NotNull] ExemploParser.ParenthesisComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisComparisonExpression</c>
	/// labeled alternative in <see cref="ExemploParser.comparison_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisComparisonExpression([NotNull] ExemploParser.ParenthesisComparisonExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableAssignment</c>
	/// labeled alternative in <see cref="ExemploParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAssignment([NotNull] ExemploParser.VariableAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableAssignment</c>
	/// labeled alternative in <see cref="ExemploParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAssignment([NotNull] ExemploParser.VariableAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberAtom</c>
	/// labeled alternative in <see cref="ExemploParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberAtom([NotNull] ExemploParser.NumberAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberAtom</c>
	/// labeled alternative in <see cref="ExemploParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberAtom([NotNull] ExemploParser.NumberAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableAtom</c>
	/// labeled alternative in <see cref="ExemploParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableAtom([NotNull] ExemploParser.VariableAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableAtom</c>
	/// labeled alternative in <see cref="ExemploParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableAtom([NotNull] ExemploParser.VariableAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExemploParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] ExemploParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExemploParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] ExemploParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExemploParser.comparison_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparison_operator([NotNull] ExemploParser.Comparison_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExemploParser.comparison_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparison_operator([NotNull] ExemploParser.Comparison_operatorContext context);
}
