//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exemplo.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExemploParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, NUMBER=2, VARIABLE=3, ASSIGNMENT=4, GT=5, GE=6, LT=7, LE=8, EQ=9, 
		NEQ=10, PLUS=11, MINUS=12, DIV=13, TIMES=14, LPAREN=15, RPAREN=16, SEMI=17, 
		WHITESPACE=18, SINGLE_LINE_COMMENT=19, DELIMITED_COMMENT=20;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_expression = 2, RULE_arithmetic_expression = 3, 
		RULE_comparison_expression = 4, RULE_assignment = 5, RULE_atom = 6, RULE_variable = 7, 
		RULE_comparison_operator = 8;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "expression", "arithmetic_expression", "comparison_expression", 
		"assignment", "atom", "variable", "comparison_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'var'", null, null, "'='", "'>'", "'>='", "'<'", "'<='", "'=='", 
		"'!='", "'+'", "'-'", "'/'", "'*'", "'('", "')'", "';'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "NUMBER", "VARIABLE", "ASSIGNMENT", "GT", "GE", "LT", "LE", 
		"EQ", "NEQ", "PLUS", "MINUS", "DIV", "TIMES", "LPAREN", "RPAREN", "SEMI", 
		"WHITESPACE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exemplo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExemploParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExemploParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExemploParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterRule_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitRule_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NUMBER) | (1L << VARIABLE) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 18; rule_block();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterRule_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitRule_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; arithmetic_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; comparison_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(ExemploParser.MINUS, 0); }
		public MinusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitMinusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(ExemploParser.TIMES, 0); }
		public TimesExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterTimesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitTimesExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExpressionContext : Arithmetic_expressionContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterAtomExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitAtomExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(ExemploParser.DIV, 0); }
		public DivExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterDivExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitDivExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(ExemploParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterPlusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitPlusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 33; Match(LPAREN);
				State = 34; arithmetic_expression(0);
				State = 35; Match(RPAREN);
				}
				break;
			case NUMBER:
			case VARIABLE:
				{
				_localctx = new AtomExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 54;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 52;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 40;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 41; Match(PLUS);
						State = 42; arithmetic_expression(7);
						}
						break;
					case 2:
						{
						_localctx = new MinusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 43;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 44; Match(MINUS);
						State = 45; arithmetic_expression(6);
						}
						break;
					case 3:
						{
						_localctx = new DivExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 46;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 47; Match(DIV);
						State = 48; arithmetic_expression(5);
						}
						break;
					case 4:
						{
						_localctx = new TimesExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 49;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 50; Match(TIMES);
						State = 51; arithmetic_expression(4);
						}
						break;
					}
					} 
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterParenthesisComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitParenthesisComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_comparison_expression);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new ComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; arithmetic_expression(0);
				State = 58; comparison_operator();
				State = 59; arithmetic_expression(0);
				}
				break;
			case 2:
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; Match(LPAREN);
				State = 62; comparison_expression();
				State = 63; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : AssignmentContext {
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(ExemploParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExemploParser.SEMI, 0); }
		public ITerminalNode[] VAR() { return GetTokens(ExemploParser.VAR); }
		public ITerminalNode VAR(int i) {
			return GetToken(ExemploParser.VAR, i);
		}
		public VariableAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		int _la;
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VAR) {
				{
				{
				State = 67; Match(VAR);
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73; Match(VARIABLE);
			State = 74; Match(ASSIGNMENT);
			State = 75; expression();
			State = 76; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAtomContext : AtomContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterVariableAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitVariableAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode NUMBER() { return GetToken(ExemploParser.NUMBER, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterNumberAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitNumberAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 12, RULE_atom);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; Match(NUMBER);
				}
				break;
			case VARIABLE:
				_localctx = new VariableAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 79; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(ExemploParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(ExemploParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(ExemploParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(ExemploParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(ExemploParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(ExemploParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.EnterComparison_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IExemploListener typedListener = listener as IExemploListener;
			if (typedListener != null) typedListener.ExitComparison_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ) | (1L << NEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', 'Y', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\a', 
		'\x2', '\x16', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x19', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '!', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', ')', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x37', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', ':', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x44', '\n', '\x6', '\x3', 
		'\a', '\a', '\a', 'G', '\n', '\a', '\f', '\a', '\xE', '\a', 'J', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'S', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', '\x3', '\b', '\v', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x3', 
		'\x3', '\x2', '\a', '\f', '\x2', 'Z', '\x2', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x6', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\b', '(', '\x3', '\x2', '\x2', '\x2', '\n', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'H', '\x3', '\x2', '\x2', '\x2', '\xE', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'V', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', 
		'\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', '\x5', 
		'\f', '\a', '\x2', '\x1B', '\x1D', '\x5', '\x6', '\x4', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x5', 
		'\b', '\x5', '\x2', '\x1F', '!', '\x5', '\n', '\x6', '\x2', ' ', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\b', '\x5', '\x1', '\x2', 
		'#', '$', '\a', '\x11', '\x2', '\x2', '$', '%', '\x5', '\b', '\x5', '\x2', 
		'%', '&', '\a', '\x12', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', 
		'\'', ')', '\x5', '\xE', '\b', '\x2', '(', '\"', '\x3', '\x2', '\x2', 
		'\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\f', '\b', '\x2', '\x2', '+', ',', '\a', '\r', 
		'\x2', '\x2', ',', '\x37', '\x5', '\b', '\x5', '\t', '-', '.', '\f', '\a', 
		'\x2', '\x2', '.', '/', '\a', '\xE', '\x2', '\x2', '/', '\x37', '\x5', 
		'\b', '\x5', '\b', '\x30', '\x31', '\f', '\x6', '\x2', '\x2', '\x31', 
		'\x32', '\a', '\xF', '\x2', '\x2', '\x32', '\x37', '\x5', '\b', '\x5', 
		'\a', '\x33', '\x34', '\f', '\x5', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\x10', '\x2', '\x2', '\x35', '\x37', '\x5', '\b', '\x5', '\x6', '\x36', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x36', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x30', '\x3', '\x2', '\x2', '\x2', '\x36', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\t', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x5', '\b', '\x5', '\x2', '<', '=', '\x5', '\x12', '\n', 
		'\x2', '=', '>', '\x5', '\b', '\x5', '\x2', '>', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\a', '\x11', '\x2', '\x2', '@', '\x41', '\x5', 
		'\n', '\x6', '\x2', '\x41', '\x42', '\a', '\x12', '\x2', '\x2', '\x42', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x43', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x44', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'G', '\a', '\x3', '\x2', '\x2', '\x46', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', '\x5', '\x2', '\x2', 'L', 'M', '\a', '\x6', '\x2', '\x2', 
		'M', 'N', '\x5', '\x6', '\x4', '\x2', 'N', 'O', '\a', '\x13', '\x2', '\x2', 
		'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\a', '\x4', '\x2', '\x2', 
		'Q', 'S', '\x5', '\x10', '\t', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '\x5', '\x2', '\x2', 'U', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\t', '\x2', '\x2', '\x2', 'W', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\x17', '\x1C', ' ', '(', '\x36', '\x38', '\x43', 
		'H', 'R',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
