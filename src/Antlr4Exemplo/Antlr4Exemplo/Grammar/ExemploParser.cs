//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Exemplo.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class ExemploParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ASSIGNMENT=1, PLUS_ASSIGNMENT=2, MINUS_ASSIGNMENT=3, DIV_ASSIGNMENT=4, 
		TIMES_ASSIGNMENT=5, GT=6, GE=7, LT=8, LE=9, EQ=10, NEQ=11, PLUS=12, MINUS=13, 
		DIV=14, TIMES=15, LBRACE=16, RBRACE=17, LPAREN=18, RPAREN=19, SEMI=20, 
		COMMA=21, WHITESPACE=22, SINGLE_LINE_COMMENT=23, DELIMITED_COMMENT=24, 
		AND=25, OR=26, IF=27, ELSE=28, WHILE=29, COALESCE_OPERATOR=30, NULL=31, 
		VAR=32, NUMBER=33, VARIABLE=34;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_expression = 2, RULE_arithmetic_expression = 3, 
		RULE_comparison_expression = 4, RULE_loop_expression = 5, RULE_null_coalescing_expression = 6, 
		RULE_variable_declaration = 7, RULE_assignment = 8, RULE_statement = 9, 
		RULE_atom = 10, RULE_variable = 11, RULE_comparison_operator = 12, RULE_assignment_operator = 13;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "expression", "arithmetic_expression", "comparison_expression", 
		"loop_expression", "null_coalescing_expression", "variable_declaration", 
		"assignment", "statement", "atom", "variable", "comparison_operator", 
		"assignment_operator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'+='", "'-='", "'/='", "'*='", "'>'", "'>='", "'<'", "'<='", 
		"'=='", "'!='", "'+'", "'-'", "'/'", "'*'", "'{'", "'}'", "'('", "')'", 
		"';'", "','", null, null, null, "'&&'", "'||'", "'if'", "'else'", "'while'", 
		"'??'", "'null'", "'var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ASSIGNMENT", "PLUS_ASSIGNMENT", "MINUS_ASSIGNMENT", "DIV_ASSIGNMENT", 
		"TIMES_ASSIGNMENT", "GT", "GE", "LT", "LE", "EQ", "NEQ", "PLUS", "MINUS", 
		"DIV", "TIMES", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "SEMI", "COMMA", 
		"WHITESPACE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "AND", "OR", 
		"IF", "ELSE", "WHILE", "COALESCE_OPERATOR", "NULL", "VAR", "NUMBER", "VARIABLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Exemplo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExemploParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExemploParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExemploParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 28; rule_block();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; variable_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36; expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public Loop_expressionContext loop_expression() {
			return GetRuleContext<Loop_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; arithmetic_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; comparison_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42; loop_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceArithmeticExpressionContext : Arithmetic_expressionContext {
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public CoalesceArithmeticExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(ExemploParser.MINUS, 0); }
		public MinusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimesExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(ExemploParser.TIMES, 0); }
		public TimesExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExpressionContext : Arithmetic_expressionContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(ExemploParser.DIV, 0); }
		public DivExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(ExemploParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 46; Match(LPAREN);
				State = 47; arithmetic_expression(0);
				State = 48; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new CoalesceArithmeticExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50; null_coalescing_expression();
				}
				break;
			case 3:
				{
				_localctx = new AtomExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; atom();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 66;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 54;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 55; Match(PLUS);
						State = 56; arithmetic_expression(8);
						}
						break;
					case 2:
						{
						_localctx = new MinusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 57;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 58; Match(MINUS);
						State = 59; arithmetic_expression(7);
						}
						break;
					case 3:
						{
						_localctx = new DivExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 60;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 61; Match(DIV);
						State = 62; arithmetic_expression(6);
						}
						break;
					case 4:
						{
						_localctx = new TimesExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 63;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 64; Match(TIMES);
						State = 65; arithmetic_expression(5);
						}
						break;
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndComparisonExpressionContext : Comparison_expressionContext {
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(ExemploParser.AND, 0); }
		public AndComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrComparisonExpressionContext : Comparison_expressionContext {
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(ExemploParser.OR, 0); }
		public OrComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		return comparison_expression(0);
	}

	private Comparison_expressionContext comparison_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, _parentState);
		Comparison_expressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_comparison_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new ComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 72; arithmetic_expression(0);
				State = 73; comparison_operator();
				State = 74; arithmetic_expression(0);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76; Match(LPAREN);
				State = 77; comparison_expression(0);
				State = 78; Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 88;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new AndComparisonExpressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 82;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 83; Match(AND);
						State = 84; comparison_expression(4);
						}
						break;
					case 2:
						{
						_localctx = new OrComparisonExpressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 85;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 86; Match(OR);
						State = 87; comparison_expression(3);
						}
						break;
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Loop_expressionContext : ParserRuleContext {
		public Loop_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_expression; } }
	 
		public Loop_expressionContext() { }
		public virtual void CopyFrom(Loop_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileExpressionContext : Loop_expressionContext {
		public ITerminalNode WHILE() { return GetToken(ExemploParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(ExemploParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(ExemploParser.RBRACE, 0); }
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public WhileExpressionContext(Loop_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_expressionContext loop_expression() {
		Loop_expressionContext _localctx = new Loop_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_loop_expression);
		int _la;
		try {
			_localctx = new WhileExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(WHILE);
			State = 94; Match(LPAREN);
			State = 95; comparison_expression(0);
			State = 96; Match(RPAREN);
			State = 97; Match(LBRACE);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 98; rule_block();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
	 
		public Null_coalescing_expressionContext() { }
		public virtual void CopyFrom(Null_coalescing_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceExpressionContext : Null_coalescing_expressionContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode COALESCE_OPERATOR() { return GetToken(ExemploParser.COALESCE_OPERATOR, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public CoalesceExpressionContext(Null_coalescing_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_null_coalescing_expression);
		try {
			_localctx = new CoalesceExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; atom();
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 107; Match(COALESCE_OPERATOR);
				State = 108; null_coalescing_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	 
		public Variable_declarationContext() { }
		public virtual void CopyFrom(Variable_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableDeclarationContext : Variable_declarationContext {
		public ITerminalNode VAR() { return GetToken(ExemploParser.VAR, 0); }
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(ExemploParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExemploParser.SEMI, 0); }
		public VariableDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_variable_declaration);
		try {
			_localctx = new VariableDeclarationContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(VAR);
			State = 112; Match(VARIABLE);
			State = 113; Match(ASSIGNMENT);
			State = 114; expression();
			State = 115; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAssignmentContext : AssignmentContext {
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(ExemploParser.SEMI, 0); }
		public VariableAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			_localctx = new VariableAssignmentContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(VARIABLE);
			State = 118; assignment_operator();
			State = 119; expression();
			State = 120; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(ExemploParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(ExemploParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ExemploParser.RPAREN, 0); }
		public ITerminalNode[] LBRACE() { return GetTokens(ExemploParser.LBRACE); }
		public ITerminalNode LBRACE(int i) {
			return GetToken(ExemploParser.LBRACE, i);
		}
		public ITerminalNode[] RBRACE() { return GetTokens(ExemploParser.RBRACE); }
		public ITerminalNode RBRACE(int i) {
			return GetToken(ExemploParser.RBRACE, i);
		}
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(ExemploParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		int _la;
		try {
			_localctx = new IfStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(IF);
			State = 123; Match(LPAREN);
			State = 124; comparison_expression(0);
			State = 125; Match(RPAREN);
			State = 126; Match(LBRACE);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << IF) | (1L << WHILE) | (1L << NULL) | (1L << VAR) | (1L << NUMBER) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 127; rule_block();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133; Match(RBRACE);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 134; Match(ELSE);
				State = 135; Match(LBRACE);
				State = 136; rule_block();
				State = 137; Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableAtomContext : AtomContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VariableAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode NUMBER() { return GetToken(ExemploParser.NUMBER, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullAtomContext : AtomContext {
		public ITerminalNode NULL() { return GetToken(ExemploParser.NULL, 0); }
		public NullAtomContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 20, RULE_atom);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; Match(NUMBER);
				}
				break;
			case NULL:
				_localctx = new NullAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; Match(NULL);
				}
				break;
			case VARIABLE:
				_localctx = new VariableAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 143; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(ExemploParser.VARIABLE, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(ExemploParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(ExemploParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(ExemploParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(ExemploParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(ExemploParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(ExemploParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ) | (1L << NEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(ExemploParser.ASSIGNMENT, 0); }
		public ITerminalNode PLUS_ASSIGNMENT() { return GetToken(ExemploParser.PLUS_ASSIGNMENT, 0); }
		public ITerminalNode MINUS_ASSIGNMENT() { return GetToken(ExemploParser.MINUS_ASSIGNMENT, 0); }
		public ITerminalNode DIV_ASSIGNMENT() { return GetToken(ExemploParser.DIV_ASSIGNMENT, 0); }
		public ITerminalNode TIMES_ASSIGNMENT() { return GetToken(ExemploParser.TIMES_ASSIGNMENT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExemploVisitor<TResult> typedVisitor = visitor as IExemploVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGNMENT) | (1L << PLUS_ASSIGNMENT) | (1L << MINUS_ASSIGNMENT) | (1L << DIV_ASSIGNMENT) | (1L << TIMES_ASSIGNMENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		case 4: return comparison_expression_sempred((Comparison_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}
	private bool comparison_expression_sempred(Comparison_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '$', '\x9B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\a', '\x2', ' ', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x37', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\x45', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'H', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'S', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '[', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '^', '\v', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x66', 
		'\n', '\a', '\f', '\a', '\xE', '\a', 'i', '\v', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'p', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '\x83', '\n', '\v', '\f', '\v', '\xE', '\v', '\x86', 
		'\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\x8E', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x93', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x2', '\x4', '\b', '\n', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', 
		'\x4', '\x3', '\x2', '\b', '\r', '\x3', '\x2', '\x3', '\a', '\x2', '\xA1', 
		'\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '-', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'R', '\x3', '\x2', '\x2', '\x2', '\f', '_', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'l', '\x3', '\x2', '\x2', '\x2', '\x10', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'w', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x16', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x94', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x98', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		' ', '\x5', '\x4', '\x3', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '$', ')', '\x5', 
		'\x12', '\n', '\x2', '%', ')', '\x5', '\x10', '\t', '\x2', '&', ')', '\x5', 
		'\x6', '\x4', '\x2', '\'', ')', '\x5', '\x14', '\v', '\x2', '(', '$', 
		'\x3', '\x2', '\x2', '\x2', '(', '%', '\x3', '\x2', '\x2', '\x2', '(', 
		'&', '\x3', '\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', 
		')', '\x5', '\x3', '\x2', '\x2', '\x2', '*', '.', '\x5', '\b', '\x5', 
		'\x2', '+', '.', '\x5', '\n', '\x6', '\x2', ',', '.', '\x5', '\f', '\a', 
		'\x2', '-', '*', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\a', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\b', '\x5', '\x1', '\x2', '\x30', '\x31', 
		'\a', '\x14', '\x2', '\x2', '\x31', '\x32', '\x5', '\b', '\x5', '\x2', 
		'\x32', '\x33', '\a', '\x15', '\x2', '\x2', '\x33', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x5', '\xE', '\b', '\x2', '\x35', '\x37', 
		'\x5', '\x16', '\f', '\x2', '\x36', '/', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x46', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\f', 
		'\t', '\x2', '\x2', '\x39', ':', '\a', '\xE', '\x2', '\x2', ':', '\x45', 
		'\x5', '\b', '\x5', '\n', ';', '<', '\f', '\b', '\x2', '\x2', '<', '=', 
		'\a', '\xF', '\x2', '\x2', '=', '\x45', '\x5', '\b', '\x5', '\t', '>', 
		'?', '\f', '\a', '\x2', '\x2', '?', '@', '\a', '\x10', '\x2', '\x2', '@', 
		'\x45', '\x5', '\b', '\x5', '\b', '\x41', '\x42', '\f', '\x6', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\x11', '\x2', '\x2', '\x43', '\x45', '\x5', 
		'\b', '\x5', '\a', '\x44', '\x38', '\x3', '\x2', '\x2', '\x2', '\x44', 
		';', '\x3', '\x2', '\x2', '\x2', '\x44', '>', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\t', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\b', '\x6', '\x1', '\x2', 
		'J', 'K', '\x5', '\b', '\x5', '\x2', 'K', 'L', '\x5', '\x1A', '\xE', '\x2', 
		'L', 'M', '\x5', '\b', '\x5', '\x2', 'M', 'S', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\a', '\x14', '\x2', '\x2', 'O', 'P', '\x5', '\n', '\x6', '\x2', 
		'P', 'Q', '\a', '\x15', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'I', '\x3', '\x2', '\x2', '\x2', 'R', 'N', '\x3', '\x2', '\x2', '\x2', 
		'S', '\\', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\f', '\x5', '\x2', '\x2', 
		'U', 'V', '\a', '\x1B', '\x2', '\x2', 'V', '[', '\x5', '\n', '\x6', '\x6', 
		'W', 'X', '\f', '\x4', '\x2', '\x2', 'X', 'Y', '\a', '\x1C', '\x2', '\x2', 
		'Y', '[', '\x5', '\n', '\x6', '\x5', 'Z', 'T', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'W', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', '\v', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\a', '\x1F', '\x2', '\x2', '`', '\x61', '\a', 
		'\x14', '\x2', '\x2', '\x61', '\x62', '\x5', '\n', '\x6', '\x2', '\x62', 
		'\x63', '\a', '\x15', '\x2', '\x2', '\x63', 'g', '\a', '\x12', '\x2', 
		'\x2', '\x64', '\x66', '\x5', '\x4', '\x3', '\x2', '\x65', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'j', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\x13', '\x2', '\x2', 'k', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'o', '\x5', '\x16', '\f', '\x2', 'm', 'n', '\a', ' ', '\x2', 
		'\x2', 'n', 'p', '\x5', '\xE', '\b', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\a', '\"', '\x2', '\x2', 'r', 's', '\a', '$', 
		'\x2', '\x2', 's', 't', '\a', '\x3', '\x2', '\x2', 't', 'u', '\x5', '\x6', 
		'\x4', '\x2', 'u', 'v', '\a', '\x16', '\x2', '\x2', 'v', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\a', '$', '\x2', '\x2', 'x', 'y', '\x5', 
		'\x1C', '\xF', '\x2', 'y', 'z', '\x5', '\x6', '\x4', '\x2', 'z', '{', 
		'\a', '\x16', '\x2', '\x2', '{', '\x13', '\x3', '\x2', '\x2', '\x2', '|', 
		'}', '\a', '\x1D', '\x2', '\x2', '}', '~', '\a', '\x14', '\x2', '\x2', 
		'~', '\x7F', '\x5', '\n', '\x6', '\x2', '\x7F', '\x80', '\a', '\x15', 
		'\x2', '\x2', '\x80', '\x84', '\a', '\x12', '\x2', '\x2', '\x81', '\x83', 
		'\x5', '\x4', '\x3', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x8D', '\a', '\x13', '\x2', '\x2', '\x88', '\x89', '\a', '\x1E', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\x12', '\x2', '\x2', '\x8A', '\x8B', 
		'\x5', '\x4', '\x3', '\x2', '\x8B', '\x8C', '\a', '\x13', '\x2', '\x2', 
		'\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x8F', '\x93', '\a', '#', '\x2', '\x2', '\x90', 
		'\x93', '\a', '!', '\x2', '\x2', '\x91', '\x93', '\x5', '\x18', '\r', 
		'\x2', '\x92', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '$', '\x2', 
		'\x2', '\x95', '\x19', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\t', 
		'\x2', '\x2', '\x2', '\x97', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\t', '\x3', '\x2', '\x2', '\x99', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '!', '(', '-', '\x36', '\x44', '\x46', 'R', 'Z', '\\', 
		'g', 'o', '\x84', '\x8D', '\x92',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
